module test_shr_string

  ! Tests of shr_string_mod

  use pfunit_mod
  use shr_string_mod

  implicit none

  integer, parameter :: list_len = 256

contains

  ! ------------------------------------------------------------------------
  ! Tests of shr_string_listDiff
  ! ------------------------------------------------------------------------

  @Test
  subroutine test_shr_string_listDiff_default()
    character(len=list_len) :: actual

    call shr_string_listDiff( &
         list1 = 'first:second:third:fourth', &
         list2 = 'fourth:second', &
         listout = actual)
    @assertEqual('first:third', actual)
  end subroutine test_shr_string_listDiff_default

  @Test
  subroutine test_shr_string_listDiff_oneElementList2()
    ! Make sure that it correctly handles the edge case of a single element in list2
    ! (i.e., with no delimiters).
    character(len=list_len) :: actual

    call shr_string_listDiff( &
         list1 = 'first:second:third:fourth', &
         list2 = 'third', &
         listout = actual)
    @assertEqual('first:second:fourth', actual)
  end subroutine test_shr_string_listDiff_oneElementList2

  @Test
  subroutine test_shr_string_listDiff_emptyList2()
    character(len=list_len) :: actual

    call shr_string_listDiff( &
         list1 = 'first:second:third:fourth', &
         list2 = ' ', &
         listout = actual)
    @assertEqual('first:second:third:fourth', actual)
  end subroutine test_shr_string_listDiff_emptyList2

  @Test
  subroutine test_shr_string_listDiff_List2equalsList1()
    character(len=list_len) :: actual

    call shr_string_listDiff( &
         list1 = 'first:second:third:fourth', &
         list2 = 'fourth:second:first:third', &  ! same as list1, but different order
         listout = actual)
    @assertEqual(' ', actual)
  end subroutine test_shr_string_listDiff_List2equalsList1

  @Test
  subroutine test_shr_string_listDiff_elementNotInList1()
    character(len=list_len) :: actual

    call shr_string_listDiff( &
         list1 = 'first:second:third:fourth', &
         list2 = 'fifth', &
         listout = actual)
    @assertEqual('first:second:third:fourth', actual)
  end subroutine test_shr_string_listDiff_elementNotInList1

  ! ------------------------------------------------------------------------
  ! Tests of shr_string_listFromSuffixes
  ! ------------------------------------------------------------------------

  @Test
  subroutine test_shr_string_listFromSuffixes_with_1()
    ! 1 suffix -> list of length 1
    character(len=list_len) :: actual

    actual = shr_string_listFromSuffixes(suffixes = ['_s1'], strBase = 'foo')
    @assertEqual('foo_s1', actual)
  end subroutine test_shr_string_listFromSuffixes_with_1

  @Test
  subroutine test_shr_string_listFromSuffixes_with_3()
    ! 3 suffixes -> list of length 3
    character(len=list_len) :: actual

    actual = shr_string_listFromSuffixes(suffixes = ['_s1', '_s2', '_s3'], strBase = 'foo')
    @assertEqual('foo_s1:foo_s2:foo_s3', actual)
  end subroutine test_shr_string_listFromSuffixes_with_3

  ! ------------------------------------------------------------------------
  ! Tests of shr_string_listCreateField
  ! ------------------------------------------------------------------------

  @Test
  subroutine test_shr_string_listCreateField_basic()
    character(len=list_len) :: actual, expected

    actual = shr_string_listCreateField(numFields = 5, strBase = 'LAI')
    expected = 'LAI_1:LAI_2:LAI_3:LAI_4:LAI_5'
    @assertEqual(expected, actual)
  end subroutine test_shr_string_listCreateField_basic

  ! ------------------------------------------------------------------------
  ! Tests of shr_string_listAddSuffix
  ! ------------------------------------------------------------------------

  @Test
  subroutine test_shr_string_listAddSuffix_with_empty_list()
    character(len=list_len) :: actual

    call shr_string_listAddSuffix(list=' ', suffix='00', new_list=actual)
    @assertEqual(' ', actual)
  end subroutine test_shr_string_listAddSuffix_with_empty_list

  @Test
  subroutine test_shr_string_listAddSuffix_with_one_element()
    character(len=list_len) :: actual

    call shr_string_listAddSuffix(list='first', suffix='00', new_list=actual)
    @assertEqual('first00', actual)
  end subroutine test_shr_string_listAddSuffix_with_one_element

  @Test
  subroutine test_shr_string_listAddSuffix_with_multiple_elements()
    character(len=list_len) :: actual, expected

    call shr_string_listAddSuffix(list='first:second:third', suffix='00', new_list=actual)
    expected = 'first00:second00:third00'
    @assertEqual(expected, actual)
  end subroutine test_shr_string_listAddSuffix_with_multiple_elements

  @Test
  subroutine test_shr_string_listAddSuffix_with_empty_suffix()
    character(len=list_len) :: actual, expected

    call shr_string_listAddSuffix(list='first:second:third', suffix=' ', new_list=actual)
    expected = 'first:second:third'
    @assertEqual(expected, actual)
  end subroutine test_shr_string_listAddSuffix_with_empty_suffix

end module test_shr_string
